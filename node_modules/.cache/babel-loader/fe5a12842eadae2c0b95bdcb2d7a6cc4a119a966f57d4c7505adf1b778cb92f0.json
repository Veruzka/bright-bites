{"ast":null,"code":"import dedent from 'string-dedent';\nfunction deduplicateByKey(arr, key) {\n  let map = new Map();\n  for (let item of arr) {\n    let value = key(item);\n    if (map.has(value)) {\n      continue;\n    }\n    map.set(value, item);\n  }\n  return Array.from(map.values());\n}\nexport function logFontsUsage(fontsBundles) {\n  if (!fontsBundles.length) {\n    return '';\n  }\n  let familyToFilenames = new Map();\n  for (let fontDefBundle of fontsBundles) {\n    let filename = fontDefBundle.fileName;\n    for (let font of fontDefBundle.fonts) {\n      if (familyToFilenames.has(font.family)) {\n        familyToFilenames.get(font.family).add(filename);\n      } else {\n        familyToFilenames.set(font.family, new Set([filename]));\n      }\n    }\n  }\n  let str = `There are ${familyToFilenames.size} fonts used:\\n`;\n  for (let [family, filenames] of familyToFilenames.entries()) {\n    str += `${JSON.stringify(family)}, used by\\n`;\n    for (let filename of filenames) {\n      str += `  - ${filename}\\n`;\n    }\n  }\n  return str;\n}\nexport function getFontsStyles(_fontsDefs) {\n  if (!_fontsDefs.length) {\n    return '';\n  }\n  let urlToFilenames = new Map();\n  for (let fontDefBundle of _fontsDefs) {\n    let filename = fontDefBundle.fileName;\n    for (let font of fontDefBundle.fonts) {\n      if (urlToFilenames.has(font.url)) {\n        urlToFilenames.get(font.url).add(filename);\n      } else {\n        urlToFilenames.set(font.url, new Set([filename]));\n      }\n    }\n  }\n  const allFonts = deduplicateByKey(_fontsDefs.flatMap(x => x.fonts), x => x?.url).filter(x => x.url).sort((a, b) => a.url.localeCompare(b.url));\n  // group fonts by the filenames users\n  const grouped = groupBy(allFonts, x => {\n    return [...(urlToFilenames.get(x.url) || [])].sort().join(', ');\n  });\n  let str = '\\n\\n';\n  for (let [groupComment, fonts] of grouped.entries()) {\n    fonts = sortByKey(fonts, x => x.url);\n    str += `/* used by ${groupComment} */\\n`;\n    str += '\\n' + fonts.map(x => {\n      let str = '';\n      str += dedent`\n                    @font-face {\n                        font-family: '${x.family}'; \n                        src: url('${x.url}');\\n\n                    `;\n      if (x.style) {\n        str += `    font-style: ${x.style};\\n`;\n      }\n      if (x.weight) {\n        str += `    font-weight: ${x.weight};\\n`;\n      }\n      if (x.unicodeRange) {\n        str += `    unicodeRange: ${x.unicodeRange};\\n`;\n      }\n      str += `}\\n`;\n      return str;\n    }).join('\\n') + '\\n';\n  }\n  return str;\n}\nexport const defaultBreakpointSizes = {\n  base: 0,\n  sm: 320,\n  md: 768,\n  lg: 960,\n  xl: 1200,\n  '2xl': 1536\n};\n// @deprecated TODO remove this in future releases\nexport const breakpointsStylesLegacy = breakpointSizes => {\n  breakpointSizes = {\n    ...defaultBreakpointSizes,\n    ...breakpointSizes\n  };\n  return /* css */`\n/* Base */\n@media (min-width: ${breakpointSizes.base}px) and (max-width: ${breakpointSizes.sm - 1}px) {\n    .unframer-hidden.unframer-base { \n        display: contents;\n    }\n}\n\n/* Small */\n@media (min-width: ${breakpointSizes.sm}px) and (max-width: ${breakpointSizes.md - 1}px) {\n    .unframer-hidden.unframer-sm { \n        display: contents;\n    }\n}\n\n/* Medium */\n@media (min-width: ${breakpointSizes.md}px) and (max-width: ${breakpointSizes.lg - 1}px) {\n    .unframer-hidden.unframer-md { \n        display: contents;\n    }\n}\n\n/* Large */\n@media (min-width: ${breakpointSizes.lg}px) and (max-width: ${breakpointSizes.xl - 1}px) {\n    .unframer-hidden.unframer-lg { \n        display: contents;\n    }\n}\n\n/* Extra Large */\n@media (min-width: ${breakpointSizes.xl}px) and (max-width: ${breakpointSizes['2xl'] - 1}px) {\n    .unframer-hidden.unframer-xl { \n        display: contents;\n    }\n}\n\n/* 2 Extra Large */\n@media (min-width: ${breakpointSizes['2xl']}px) {\n    .unframer-hidden.unframer-2xl { \n        display: contents;\n    }\n}\n\n.unframer-hidden {\n    display: none;\n}\n`;\n};\nexport const breakpointsStyles = breakpointSizes => {\n  breakpointSizes = {\n    ...defaultBreakpointSizes,\n    ...breakpointSizes\n  };\n  return /* css */`\n/* Base */\n@media (min-width: ${breakpointSizes.base}px) and (max-width: ${breakpointSizes.sm - 1}px) {\n    .unframer:not(.unframer-base) { \n        display: none !important;\n    }\n}\n\n/* Small */\n@media (min-width: ${breakpointSizes.sm}px) and (max-width: ${breakpointSizes.md - 1}px) {\n    .unframer:not(.unframer-sm) { \n        display: none !important;\n    }\n}\n\n/* Medium */\n@media (min-width: ${breakpointSizes.md}px) and (max-width: ${breakpointSizes.lg - 1}px) {\n    .unframer:not(.unframer-md) { \n        display: none !important;\n    }\n}\n\n/* Large */\n@media (min-width: ${breakpointSizes.lg}px) and (max-width: ${breakpointSizes.xl - 1}px) {\n    .unframer:not(.unframer-lg) { \n        display: none !important;\n    }\n}\n\n/* Extra Large */\n@media (min-width: ${breakpointSizes.xl}px) and (max-width: ${breakpointSizes['2xl'] - 1}px) {\n    .unframer:not(.unframer-xl) { \n        display: none !important;\n    }\n}\n\n/* 2 Extra Large */\n@media (min-width: ${breakpointSizes['2xl']}px) {\n    .unframer:not(.unframer-2xl) { \n        display: none !important;\n    }\n}\n`;\n};\nexport function groupBy(arr, key) {\n  const map = new Map();\n  for (let item of arr) {\n    const k = key(item);\n    if (!map.has(k)) {\n      map.set(k, []);\n    }\n    map.get(k)?.push(item);\n  }\n  return map;\n}\nfunction sortByKey(arr, key) {\n  return arr.slice().sort((a, b) => key(a).localeCompare(key(b)));\n}","map":{"version":3,"names":["dedent","deduplicateByKey","arr","key","map","Map","item","value","has","set","Array","from","values","logFontsUsage","fontsBundles","length","familyToFilenames","fontDefBundle","filename","fileName","font","fonts","family","get","add","Set","str","size","filenames","entries","JSON","stringify","getFontsStyles","_fontsDefs","urlToFilenames","url","allFonts","flatMap","x","filter","sort","a","b","localeCompare","grouped","groupBy","join","groupComment","sortByKey","style","weight","unicodeRange","defaultBreakpointSizes","base","sm","md","lg","xl","breakpointsStylesLegacy","breakpointSizes","breakpointsStyles","k","push","slice"],"sources":["/Users/veruskaoropeza/projects/bright-bites/node_modules/unframer/src/css.ts"],"sourcesContent":["import dedent from 'string-dedent'\nimport { ComponentFont } from './framer.js'\n\nfunction deduplicateByKey<T>(arr: T[], key: (k: T) => string): T[] {\n    let map = new Map()\n    for (let item of arr) {\n        let value = key(item)\n        if (map.has(value)) {\n            continue\n        }\n        map.set(value, item)\n    }\n    return Array.from(map.values())\n}\n\nexport type ComponentFontBundle = {\n    /**\n     * This flag specifies whether the font bundle includes the specific font\n     * weights of Framer’s Inter font that the component uses. New smart\n     * components do that (which means we can emit CSS only for Inter fonts that\n     * are actually used); older smart components don’t (which means some places\n     * will emit CSS for all Inter fonts if this flag is not set).\n     * https://www.notion.so/framer/RFC-ComponentFont-v2-d5fd3e822fb049ffb6971554ab0e4e42\n     */\n    explicitInter: boolean\n    fileName?: string\n    fonts: ComponentFont[]\n}\n\nexport function logFontsUsage(fontsBundles: ComponentFontBundle[]) {\n    if (!fontsBundles.length) {\n        return ''\n    }\n    let familyToFilenames = new Map<string, Set<string>>()\n    for (let fontDefBundle of fontsBundles) {\n        let filename = fontDefBundle.fileName\n        for (let font of fontDefBundle.fonts) {\n            if (familyToFilenames.has(font.family)) {\n                familyToFilenames.get(font.family)!.add(filename!)\n            } else {\n                familyToFilenames.set(font.family, new Set([filename!]))\n            }\n        }\n    }\n    let str = `There are ${familyToFilenames.size} fonts used:\\n`\n    for (let [family, filenames] of familyToFilenames.entries()) {\n        str += `${JSON.stringify(family)}, used by\\n`\n        for (let filename of filenames) {\n            str += `  - ${filename}\\n`\n        }\n    }\n    return str\n}\n\nexport function getFontsStyles(_fontsDefs: ComponentFontBundle[]) {\n    if (!_fontsDefs.length) {\n        return ''\n    }\n    let urlToFilenames = new Map<string, Set<string>>()\n\n    for (let fontDefBundle of _fontsDefs) {\n        let filename = fontDefBundle.fileName\n        for (let font of fontDefBundle.fonts) {\n            if (urlToFilenames.has(font.url)) {\n                urlToFilenames.get(font.url)!.add(filename!)\n            } else {\n                urlToFilenames.set(font.url, new Set([filename!]))\n            }\n        }\n    }\n    const allFonts = deduplicateByKey(\n        _fontsDefs.flatMap((x) => x.fonts),\n        (x) => x?.url,\n    )\n        .filter((x) => x.url)\n        .sort((a, b) => a.url.localeCompare(b.url))\n\n    // group fonts by the filenames users\n    const grouped = groupBy(allFonts, (x) => {\n        return [...(urlToFilenames.get(x.url) || [])].sort().join(', ')\n    })\n\n    let str = '\\n\\n'\n    for (let [groupComment, fonts] of grouped.entries()) {\n        fonts = sortByKey(fonts, (x) => x.url)\n        str += `/* used by ${groupComment} */\\n`\n        str +=\n            '\\n' +\n            fonts\n                .map((x) => {\n                    let str = ''\n                    str += dedent`\n                    @font-face {\n                        font-family: '${x.family}'; \n                        src: url('${x.url}');\\n\n                    `\n                    if (x.style) {\n                        str += `    font-style: ${x.style};\\n`\n                    }\n                    if (x.weight) {\n                        str += `    font-weight: ${x.weight};\\n`\n                    }\n                    if (x.unicodeRange) {\n                        str += `    unicodeRange: ${x.unicodeRange};\\n`\n                    }\n                    str += `}\\n`\n                    return str\n                })\n                .join('\\n') +\n            '\\n'\n    }\n\n    return str\n}\n\nexport const defaultBreakpointSizes = {\n    base: 0,\n    sm: 320,\n    md: 768,\n    lg: 960,\n    xl: 1200,\n    '2xl': 1536,\n} as const\n\nexport type BreakpointSizes = typeof defaultBreakpointSizes\n\n// @deprecated TODO remove this in future releases\nexport const breakpointsStylesLegacy = (breakpointSizes?: BreakpointSizes) => {\n    breakpointSizes = { ...defaultBreakpointSizes, ...breakpointSizes }\n    return /* css */ `\n/* Base */\n@media (min-width: ${breakpointSizes.base}px) and (max-width: ${\n        breakpointSizes.sm - 1\n    }px) {\n    .unframer-hidden.unframer-base { \n        display: contents;\n    }\n}\n\n/* Small */\n@media (min-width: ${breakpointSizes.sm}px) and (max-width: ${\n        breakpointSizes.md - 1\n    }px) {\n    .unframer-hidden.unframer-sm { \n        display: contents;\n    }\n}\n\n/* Medium */\n@media (min-width: ${breakpointSizes.md}px) and (max-width: ${\n        breakpointSizes.lg - 1\n    }px) {\n    .unframer-hidden.unframer-md { \n        display: contents;\n    }\n}\n\n/* Large */\n@media (min-width: ${breakpointSizes.lg}px) and (max-width: ${\n        breakpointSizes.xl - 1\n    }px) {\n    .unframer-hidden.unframer-lg { \n        display: contents;\n    }\n}\n\n/* Extra Large */\n@media (min-width: ${breakpointSizes.xl}px) and (max-width: ${\n        breakpointSizes['2xl'] - 1\n    }px) {\n    .unframer-hidden.unframer-xl { \n        display: contents;\n    }\n}\n\n/* 2 Extra Large */\n@media (min-width: ${breakpointSizes['2xl']}px) {\n    .unframer-hidden.unframer-2xl { \n        display: contents;\n    }\n}\n\n.unframer-hidden {\n    display: none;\n}\n`\n}\nexport const breakpointsStyles = (breakpointSizes?: BreakpointSizes) => {\n    breakpointSizes = { ...defaultBreakpointSizes, ...breakpointSizes }\n    return /* css */ `\n/* Base */\n@media (min-width: ${breakpointSizes.base}px) and (max-width: ${breakpointSizes.sm - 1}px) {\n    .unframer:not(.unframer-base) { \n        display: none !important;\n    }\n}\n\n/* Small */\n@media (min-width: ${breakpointSizes.sm}px) and (max-width: ${breakpointSizes.md - 1}px) {\n    .unframer:not(.unframer-sm) { \n        display: none !important;\n    }\n}\n\n/* Medium */\n@media (min-width: ${breakpointSizes.md}px) and (max-width: ${breakpointSizes.lg - 1}px) {\n    .unframer:not(.unframer-md) { \n        display: none !important;\n    }\n}\n\n/* Large */\n@media (min-width: ${breakpointSizes.lg}px) and (max-width: ${breakpointSizes.xl - 1}px) {\n    .unframer:not(.unframer-lg) { \n        display: none !important;\n    }\n}\n\n/* Extra Large */\n@media (min-width: ${breakpointSizes.xl}px) and (max-width: ${breakpointSizes['2xl'] - 1}px) {\n    .unframer:not(.unframer-xl) { \n        display: none !important;\n    }\n}\n\n/* 2 Extra Large */\n@media (min-width: ${breakpointSizes['2xl']}px) {\n    .unframer:not(.unframer-2xl) { \n        display: none !important;\n    }\n}\n`\n}\n\nexport function groupBy<T>(arr: T[], key: (x: T) => string) {\n    const map = new Map<string, T[]>()\n    for (let item of arr) {\n        const k = key(item)\n        if (!map.has(k)) {\n            map.set(k, [])\n        }\n        map.get(k)?.push(item)\n    }\n    return map\n}\n\nfunction sortByKey<T>(arr: T[], key: (x: T) => string) {\n    return arr.slice().sort((a, b) => key(a).localeCompare(key(b)))\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}