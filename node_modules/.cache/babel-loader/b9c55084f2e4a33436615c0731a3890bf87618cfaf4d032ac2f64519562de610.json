{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.dedent = factory());\n})(this, function () {\n  'use strict';\n\n  const cache = new WeakMap();\n  const newline = /(\\n|\\r\\n?|\\u2028|\\u2029)/g;\n  const leadingWhitespace = /^\\s*/;\n  const nonWhitespace = /\\S/;\n  const slice = Array.prototype.slice;\n  function dedent(arg) {\n    if (typeof arg === 'string') {\n      return process([arg])[0];\n    }\n    if (typeof arg === 'function') {\n      return function () {\n        const args = slice.call(arguments);\n        args[0] = processTemplateStringsArray(args[0]);\n        return arg.apply(this, args);\n      };\n    }\n    const strings = processTemplateStringsArray(arg);\n    // TODO: This is just `String.cooked`: https://tc39.es/proposal-string-cooked/\n    let s = getCooked(strings, 0);\n    for (let i = 1; i < strings.length; i++) {\n      s += arguments[i] + getCooked(strings, i);\n    }\n    return s;\n  }\n  function getCooked(strings, index) {\n    const str = strings[index];\n    if (str === undefined) throw new TypeError(`invalid cooked string at index ${index}`);\n    return str;\n  }\n  function processTemplateStringsArray(strings) {\n    const cached = cache.get(strings);\n    if (cached) return cached;\n    const dedented = process(strings);\n    cache.set(strings, dedented);\n    Object.defineProperty(dedented, 'raw', {\n      value: Object.freeze(process(strings.raw))\n    });\n    Object.freeze(dedented);\n    return dedented;\n  }\n  function process(strings) {\n    // splitQuasis is now an array of arrays. The inner array is contains text content lines on the\n    // even indices, and the newline char that ends the text content line on the odd indices.\n    // In the first array, the inner array's 0 index is the opening line of the template literal.\n    // In all other arrays, the inner array's 0 index is the continuation of the line directly after a\n    // template expression.\n    //\n    // Eg, in the following case:\n    //\n    // ```\n    // String.dedent`\n    //   first\n    //   ${expression} second\n    //   third\n    // `\n    // ```\n    //\n    // We expect the following splitQuasis:\n    //\n    // ```\n    // [\n    //   [\"\", \"\\n\", \"  first\", \"\\n\", \"  \"],\n    //   [\" second\", \"\\n\", \"  third\", \"\\n\", \"\"],\n    // ]\n    // ```\n    const splitQuasis = strings.map(quasi => quasi === null || quasi === void 0 ? void 0 : quasi.split(newline));\n    let common;\n    for (let i = 0; i < splitQuasis.length; i++) {\n      const lines = splitQuasis[i];\n      if (lines === undefined) continue;\n      // The first split is the static text starting at the opening line until the first template\n      // expression (or the end of the template if there are no expressions).\n      const firstSplit = i === 0;\n      // The last split is all the static text after the final template expression until the closing\n      // line. If there are no template expressions, then the first split is also the last split.\n      const lastSplit = i + 1 === splitQuasis.length;\n      // The opening line must be empty (it very likely is) and it must not contain a template\n      // expression. The opening line's trailing newline char is removed.\n      if (firstSplit) {\n        // Length > 1 ensures there is a newline, and there is not a template expression.\n        if (lines.length === 1 || lines[0].length > 0) {\n          throw new Error('invalid content on opening line');\n        }\n        // Clear the captured newline char.\n        lines[1] = '';\n      }\n      // The closing line may only contain whitespace and must not contain a template expression. The\n      // closing line and its preceding newline are removed.\n      if (lastSplit) {\n        // Length > 1 ensures there is a newline, and there is not a template expression.\n        if (lines.length === 1 || nonWhitespace.test(lines[lines.length - 1])) {\n          throw new Error('invalid content on closing line');\n        }\n        // Clear the captured newline char, and the whitespace on the closing line.\n        lines[lines.length - 2] = '';\n        lines[lines.length - 1] = '';\n      }\n      // In the first spit, the index 0 is the opening line (which must be empty by now), and in all\n      // other splits, its the content trailing the template expression (and so can't be part of\n      // leading whitespace).\n      // Every odd index is the captured newline char, so we'll skip and only process evens.\n      for (let j = 2; j < lines.length; j += 2) {\n        const text = lines[j];\n        // If we are on the last line of this split, and we are not processing the last split (which\n        // is after all template expressions), then this line contains a template expression.\n        const lineContainsTemplateExpression = j + 1 === lines.length && !lastSplit;\n        // leadingWhitespace is guaranteed to match something, but it could be 0 chars.\n        const leading = leadingWhitespace.exec(text)[0];\n        // Empty lines do not affect the common indentation, and whitespace only lines are emptied\n        // (and also don't affect the comon indentation).\n        if (!lineContainsTemplateExpression && leading.length === text.length) {\n          lines[j] = '';\n          continue;\n        }\n        common = commonStart(leading, common);\n      }\n    }\n    const min = common ? common.length : 0;\n    return splitQuasis.map(lines => {\n      if (lines === undefined) return lines;\n      let quasi = lines[0];\n      for (let i = 1; i < lines.length; i += 2) {\n        const newline = lines[i];\n        const text = lines[i + 1];\n        quasi += newline + text.slice(min);\n      }\n      return quasi;\n    });\n  }\n  function commonStart(a, b) {\n    if (b === undefined || a === b) return a;\n    let i = 0;\n    for (const len = Math.min(a.length, b.length); i < len; i++) {\n      if (a[i] !== b[i]) break;\n    }\n    return a.slice(0, i);\n  }\n  return dedent;\n});","map":{"version":3,"names":["cache","WeakMap","newline","leadingWhitespace","nonWhitespace","slice","Array","prototype","dedent","arg","process","args","call","arguments","processTemplateStringsArray","apply","strings","s","getCooked","i","length","index","str","undefined","TypeError","cached","get","dedented","set","Object","defineProperty","value","freeze","raw","splitQuasis","map","quasi","split","common","lines","firstSplit","lastSplit","Error","test","j","text","lineContainsTemplateExpression","leading","exec","commonStart","min","a","b","len","Math"],"sources":["../../src/dedent.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}