import { Spiceflow } from './spiceflow.js';
import type { OpenAPIV3 } from 'openapi-types';
export declare const openapi: <Path extends string = "/openapi">({ path, ...additional }?: {
    path?: Path;
} & Omit<Partial<OpenAPIV3.Document>, "x-express-openapi-additional-middleware" | "x-express-openapi-validation-strict"> & {
    "x-fern-global-headers"?: Array<{
        header: string;
        name: string;
        optional?: boolean;
    }>;
    "x-fern-version"?: {
        version: {
            header: string;
            default: string;
            values: string[];
        };
    };
}) => Spiceflow<"", true, {
    state: {};
}, {
    type: {};
    error: {};
}, {
    schema: {};
    macro: {};
    macroFn: {};
}, {} & import("./types.js").CreateClient<`${Path extends "/" ? "/index" : Path extends "" ? Path : Path extends `/${string}` ? Path : Path}`, {
    get: {
        body: unknown;
        params: { [Param in import("./types.js").GetPathParameter<Path> as Param extends `${string}?` ? never : Param]: string; } & { [Param_1 in import("./types.js").GetPathParameter<Path> as Param_1 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; } extends infer T ? { [K in keyof T]: ({ [Param in import("./types.js").GetPathParameter<Path> as Param extends `${string}?` ? never : Param]: string; } & { [Param_1 in import("./types.js").GetPathParameter<Path> as Param_1 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; })[K]; } : never;
        query: unknown;
        response: {
            [x: number]: any;
            200: any;
        };
    };
}>>;
//# sourceMappingURL=openapi.d.ts.map