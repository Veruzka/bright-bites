"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stackblitzDemoExample = exports.logger = exports.spinner = void 0;
exports.terminalMarkdown = terminalMarkdown;
exports.componentNameToPath = componentNameToPath;
exports.sleep = sleep;
exports.kebabCase = kebabCase;
exports.isTruthy = isTruthy;
const picocolors_1 = __importDefault(require("picocolors"));
const marked_1 = require("marked");
const marked_terminal_1 = require("marked-terminal");
const nanospinner_1 = require("nanospinner");
exports.spinner = (0, nanospinner_1.createSpinner)('Downloading Framer Components');
marked_1.marked.use((0, marked_terminal_1.markedTerminal)());
function terminalMarkdown(markdown) {
    return (0, marked_1.marked)(markdown);
}
const shouldDebugUnframer = !!process.env.DEBUG_UNFRAMER;
const prefix = '[unframer]';
exports.logger = {
    debug: shouldDebugUnframer,
    log(...args) {
        if (!exports.logger.debug) {
            return;
        }
        console.log(prefix, ...args);
    },
    green(...args) {
        console.log([prefix, ...args].map((x) => picocolors_1.default.green(x)).join(' '));
    },
    error(...args) {
        console.error([prefix, ...args].map((x) => picocolors_1.default.red(x)).join(' '));
    },
};
function componentNameToPath(name) {
    return name
        .split('/')
        .filter(Boolean)
        .map((part) => kebabCase(part))
        .join('/');
}
function sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}
// https://www.npmjs.com/package/just-kebab-case?activeTab=readme
// any combination of spaces and punctuation characters
// thanks to http://stackoverflow.com/a/25575009
var wordSeparators = /[\s\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,\-.\/:;<=>?@\[\]^_`{|}~]+/;
var capital_plus_lower = /[A-ZÀ-Ý\u00C0-\u00D6\u00D9-\u00DD][a-zà-ÿ]/g;
var capitals = /[A-ZÀ-Ý\u00C0-\u00D6\u00D9-\u00DD]+/g;
function kebabCase(str) {
    // replace word starts with space + lower case equivalent for later parsing
    // 1) treat cap + lower as start of new word
    str = str.replace(capital_plus_lower, function (match) {
        // match is one caps followed by one non-cap
        return ' ' + (match[0].toLowerCase() || match[0]) + match[1];
    });
    // 2) treat all remaining capitals as words
    str = str.replace(capitals, function (match) {
        // match is a series of caps
        return ' ' + match.toLowerCase();
    });
    return str
        .trim()
        .split(wordSeparators)
        .join('-')
        .replace(/^-/, '')
        .replace(/-\s*$/, '');
}
function isTruthy(x) {
    return Boolean(x);
}
exports.stackblitzDemoExample = process.env.STACKBLITZ_DEMO_EXAMPLE;
//# sourceMappingURL=utils.js.map