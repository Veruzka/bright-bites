"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const client_1 = require("./client");
const env_1 = require("./env");
const supabase_server_1 = require("./supabase.server");
const kysely_1 = require("db/kysely");
(0, vitest_1.test)('hono client', async () => {
    const admin = (0, supabase_server_1.createSupabaseAdmin)();
    const email = 'test@example.com';
    const password = 'xxpasswordxx99776';
    const { error: signupError } = await admin.auth.admin.createUser({
        email,
        password,
        email_confirm: true,
    });
    // expect(signupError).toBe(null)
    const supabase = (0, supabase_server_1.createSupabaseAnon)();
    const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
    });
    (0, vitest_1.expect)(error).toBe(null);
    const session = data.session;
    const client = (0, client_1.createClient)({
        url: `http://localhost:${env_1.env.PORT}`,
        session,
        supabaseRef: env_1.supabaseRef,
    });
    const res = await client.api.v1.health.$get({});
    (0, vitest_1.expect)(res.status).toBe(200);
    const json = await res.json();
    (0, vitest_1.expect)(json).toMatchInlineSnapshot(`
      {
        "ok": true,
      }
    `);
});
(0, vitest_1.test)('get conversations with my account', async () => {
    const admin = (0, supabase_server_1.createSupabaseAdmin)();
    const email = 'beats.by.morse@gmail.com';
    const password = env_1.env.CRISP_WEBHOOKS_SECRET;
    const user = await kysely_1.db
        .selectFrom('auth.users')
        .selectAll()
        .where('email', '=', email)
        .executeTakeFirst();
    // uncomment this to set the password the first time
    // const { error: signupError } = await admin.auth.admin.updateUserById(
    //     user!.id,
    //     { password },
    // )
    // expect(signupError).toBe(null)
    const supabase = (0, supabase_server_1.createSupabaseAnon)();
    const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
    });
    (0, vitest_1.expect)(error).toBe(null);
    const session = data.session;
    const client = (0, client_1.createClient)({
        url: `http://localhost:${env_1.env.PORT}`,
        session,
        supabaseRef: env_1.supabaseRef,
    });
    const res = await client.api.v1.conversations.$get({});
    (0, vitest_1.expect)(res.status).toBe(200);
    const json = await res.json();
    (0, vitest_1.expect)(json.conversations.length).toBeGreaterThan(0);
    console.log(json.conversations);
});
//# sourceMappingURL=api-client.test.js.map