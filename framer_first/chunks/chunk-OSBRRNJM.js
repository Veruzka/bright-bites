// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 392f06e6dfe8d0e1 "BrightBites", do not edit manually */
// /:https://framerusercontent.com/modules/aL6bySkPARCvxWcUB3bh/qCftnvl0pNmxF4ONFeaY/G2qgkp8Bv.js
import { jsx as _jsx } from "react/jsx-runtime";
import { addFonts, addPropertyControls, ControlType, cx, Link, RichText, useVariantState, withCSS } from "unframer";
import { LayoutGroup, motion } from "unframer";
import * as React from "react";

// /:https://framerusercontent.com/modules/PglHvDeSAC8lSWiRpxXF/kTOtBelRPt1JLz8cGJN6/DmUGVujSl.js
import { fontStore } from "unframer";
fontStore.loadFonts(["GF;IBM Plex Sans-regular", "GF;IBM Plex Sans-500", "GF;IBM Plex Sans-500italic", "GF;IBM Plex Sans-italic"]);
var fonts = [{ explicitInter: true, fonts: [{ family: "IBM Plex Sans", source: "google", style: "normal", url: "https://fonts.gstatic.com/s/ibmplexsans/v19/zYXgKVElMYYaJe8bpLHnCwDKtdPUFI5NadY.woff2", weight: "400" }, { family: "IBM Plex Sans", source: "google", style: "normal", url: "https://fonts.gstatic.com/s/ibmplexsans/v19/zYX9KVElMYYaJe8bpLHnCwDKjSL9MINmdd_qFmo.woff2", weight: "500" }, { family: "IBM Plex Sans", source: "google", style: "italic", url: "https://fonts.gstatic.com/s/ibmplexsans/v19/zYX7KVElMYYaJe8bpLHnCwDKhdTm5IVsdP3vBmpl8A.woff2", weight: "500" }, { family: "IBM Plex Sans", source: "google", style: "italic", url: "https://fonts.gstatic.com/s/ibmplexsans/v19/zYX-KVElMYYaJe8bpLHnCwDKhdTeFaxIedbzDw.woff2", weight: "400" }] }];
var css = ['.framer-klN3F .framer-styles-preset-qkvsbi:not(.rich-text-wrapper), .framer-klN3F .framer-styles-preset-qkvsbi.rich-text-wrapper p { --framer-font-family: "IBM Plex Sans", "IBM Plex Sans Placeholder", sans-serif; --framer-font-family-bold: "IBM Plex Sans", "IBM Plex Sans Placeholder", sans-serif; --framer-font-family-bold-italic: "IBM Plex Sans", "IBM Plex Sans Placeholder", sans-serif; --framer-font-family-italic: "IBM Plex Sans", "IBM Plex Sans Placeholder", sans-serif; --framer-font-size: 14px; --framer-font-style: normal; --framer-font-style-bold: normal; --framer-font-style-bold-italic: italic; --framer-font-style-italic: italic; --framer-font-weight: 400; --framer-font-weight-bold: 500; --framer-font-weight-bold-italic: 500; --framer-font-weight-italic: 400; --framer-letter-spacing: 0px; --framer-line-height: 1.5em; --framer-paragraph-spacing: 0px; --framer-text-alignment: left; --framer-text-color: var(--token-6f286720-c046-4b1a-ae36-29b3719ec712, #292929); --framer-text-decoration: none; --framer-text-stroke-color: initial; --framer-text-stroke-width: initial; --framer-text-transform: none; }', '@media (max-width: 1199px) and (min-width: 810px) { .framer-klN3F .framer-styles-preset-qkvsbi:not(.rich-text-wrapper), .framer-klN3F .framer-styles-preset-qkvsbi.rich-text-wrapper p { --framer-font-family: "IBM Plex Sans", "IBM Plex Sans Placeholder", sans-serif; --framer-font-family-bold: "IBM Plex Sans", "IBM Plex Sans Placeholder", sans-serif; --framer-font-family-bold-italic: "IBM Plex Sans", "IBM Plex Sans Placeholder", sans-serif; --framer-font-family-italic: "IBM Plex Sans", "IBM Plex Sans Placeholder", sans-serif; --framer-font-size: 14px; --framer-font-style: normal; --framer-font-style-bold: normal; --framer-font-style-bold-italic: italic; --framer-font-style-italic: italic; --framer-font-weight: 400; --framer-font-weight-bold: 500; --framer-font-weight-bold-italic: 500; --framer-font-weight-italic: 400; --framer-letter-spacing: 0px; --framer-line-height: 1.5em; --framer-paragraph-spacing: 0px; --framer-text-alignment: left; --framer-text-color: var(--token-6f286720-c046-4b1a-ae36-29b3719ec712, #292929); --framer-text-decoration: none; --framer-text-stroke-color: initial; --framer-text-stroke-width: initial; --framer-text-transform: none; } }', '@media (max-width: 809px) and (min-width: 0px) { .framer-klN3F .framer-styles-preset-qkvsbi:not(.rich-text-wrapper), .framer-klN3F .framer-styles-preset-qkvsbi.rich-text-wrapper p { --framer-font-family: "IBM Plex Sans", "IBM Plex Sans Placeholder", sans-serif; --framer-font-family-bold: "IBM Plex Sans", "IBM Plex Sans Placeholder", sans-serif; --framer-font-family-bold-italic: "IBM Plex Sans", "IBM Plex Sans Placeholder", sans-serif; --framer-font-family-italic: "IBM Plex Sans", "IBM Plex Sans Placeholder", sans-serif; --framer-font-size: 14px; --framer-font-style: normal; --framer-font-style-bold: normal; --framer-font-style-bold-italic: italic; --framer-font-style-italic: italic; --framer-font-weight: 400; --framer-font-weight-bold: 500; --framer-font-weight-bold-italic: 500; --framer-font-weight-italic: 400; --framer-letter-spacing: 0px; --framer-line-height: 1.5em; --framer-paragraph-spacing: 0px; --framer-text-alignment: left; --framer-text-color: var(--token-6f286720-c046-4b1a-ae36-29b3719ec712, #292929); --framer-text-decoration: none; --framer-text-stroke-color: initial; --framer-text-stroke-width: initial; --framer-text-transform: none; } }'];
var className = "framer-klN3F";

// /:https://framerusercontent.com/modules/aL6bySkPARCvxWcUB3bh/qCftnvl0pNmxF4ONFeaY/G2qgkp8Bv.js
var enabledGestures = { B2KHIHB0Z: { hover: true } };
var cycleOrder = ["B2KHIHB0Z"];
var variantClassNames = { B2KHIHB0Z: "framer-v-1i96umi" };
function addPropertyOverrides(overrides, ...variants) {
  const nextOverrides = {};
  variants === null || variants === void 0 ? void 0 : variants.forEach((variant) => variant && Object.assign(nextOverrides, overrides[variant]));
  return nextOverrides;
}
var humanReadableVariantMap = {};
var transitions = { default: { damping: 60, delay: 0, duration: 0.3, ease: [0.44, 0, 0.56, 1], mass: 1, stiffness: 500, type: "spring" } };
var BASE62 = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
function useRandomID() {
  const ref = React.useRef(null);
  if (ref.current === null) {
    ref.current = Array(5).fill(0).map(() => BASE62[Math.floor(Math.random() * BASE62.length)]).join("");
  }
  return ref.current;
}
var Component = /* @__PURE__ */ React.forwardRef(function({ id, style: externalStyle = {}, className: className2, width, height, layoutId, variant: outerVariant = "B2KHIHB0Z", link: mSSMRQqXQ, category: kFJtDNWsq = "Apps", ...restProps }, ref) {
  const outerVariantId = humanReadableVariantMap[outerVariant];
  const variant = outerVariantId || outerVariant;
  const { baseVariant, classNames, gestureVariant, setGestureState, setVariant, transition, variants } = useVariantState({ cycleOrder, defaultVariant: "B2KHIHB0Z", enabledGestures, transitions, variant, variantClassNames });
  const layoutDependency = variants.join("-") + restProps.layoutDependency;
  const defaultLayoutId = useRandomID();
  const { pointerEvents, ...style } = externalStyle;
  return /* @__PURE__ */ _jsx(LayoutGroup, { id: layoutId !== null && layoutId !== void 0 ? layoutId : defaultLayoutId, children: /* @__PURE__ */ _jsx(motion.div, { "data-framer-generated": true, initial: variant, animate: variants, onHoverStart: () => setGestureState({ isHovered: true }), onHoverEnd: () => setGestureState({ isHovered: false }), onTapStart: () => setGestureState({ isPressed: true }), onTap: () => setGestureState({ isPressed: false }), onTapCancel: () => setGestureState({ isPressed: false }), className: cx("framer-VAM2N", className, classNames), style: { display: "contents", pointerEvents: pointerEvents !== null && pointerEvents !== void 0 ? pointerEvents : "auto" }, children: /* @__PURE__ */ _jsx(Link, { href: mSSMRQqXQ, openInNewTab: false, children: /* @__PURE__ */ _jsx(motion.a, { ...restProps, className: `${cx("framer-1i96umi", className2)} framer-1fhhhr0`, "data-framer-name": "v1", layoutDependency, layoutId: "B2KHIHB0Z", ref, style: { backgroundColor: "var(--token-9d4e2f6b-a2b9-4c9d-a1b7-a140ee1fc1d9, rgb(250, 250, 250))", borderBottomLeftRadius: 100, borderBottomRightRadius: 100, borderTopLeftRadius: 100, borderTopRightRadius: 100, ...style }, transition, variants: { "B2KHIHB0Z-hover": { backgroundColor: "var(--token-b343876e-c5ad-4b88-a31d-69399d409c3f, rgb(230, 230, 230))" } }, ...addPropertyOverrides({ "B2KHIHB0Z-hover": { "data-framer-name": void 0 } }, baseVariant, gestureVariant), children: /* @__PURE__ */ _jsx(RichText, { __fromCanvasComponent: true, children: /* @__PURE__ */ _jsx(React.Fragment, { children: /* @__PURE__ */ _jsx(motion.p, { className: "framer-styles-preset-qkvsbi", "data-styles-preset": "DmUGVujSl", children: "Apps" }) }), className: "framer-16fp5oc", "data-framer-name": "Category", layoutDependency, layoutId: "hmBqbKNw8", style: { "--framer-paragraph-spacing": "0px" }, text: kFJtDNWsq, transition, verticalAlignment: "top", withExternalLayout: true }) }) }) }) });
});
var css2 = ['.framer-VAM2N [data-border="true"]::after { content: ""; border-width: var(--border-top-width, 0) var(--border-right-width, 0) var(--border-bottom-width, 0) var(--border-left-width, 0); border-color: var(--border-color, none); border-style: var(--border-style, none); width: 100%; height: 100%; position: absolute; box-sizing: border-box; left: 0; top: 0; border-radius: inherit; pointer-events: none; }', "@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }", ".framer-VAM2N * { box-sizing: border-box; }", ".framer-VAM2N .framer-1fhhhr0 { display: block; }", ".framer-VAM2N .framer-1i96umi { align-content: center; align-items: center; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 0px; height: min-content; justify-content: center; overflow: visible; padding: 7px 14px 7px 14px; position: relative; text-decoration: none; width: min-content; }", ".framer-VAM2N .framer-16fp5oc { -webkit-user-select: none; flex: none; height: auto; position: relative; user-select: none; white-space: pre; width: auto; }", ".framer-VAM2N .framer-v-1i96umi .framer-1i96umi { cursor: pointer; }", "@supports (background: -webkit-named-image(i)) and (not (font-palette:dark)) { .framer-VAM2N .framer-1i96umi { gap: 0px; } .framer-VAM2N .framer-1i96umi > * { margin: 0px; margin-left: calc(0px / 2); margin-right: calc(0px / 2); } .framer-VAM2N .framer-1i96umi > :first-child { margin-left: 0px; } .framer-VAM2N .framer-1i96umi > :last-child { margin-right: 0px; } }", ...css];
var FramerG2qgkp8Bv = withCSS(Component, css2);
var stdin_default = FramerG2qgkp8Bv;
FramerG2qgkp8Bv.displayName = "Chip";
FramerG2qgkp8Bv.defaultProps = { height: 35, width: 60 };
addPropertyControls(FramerG2qgkp8Bv, { mSSMRQqXQ: { title: "Link", type: ControlType.Link }, kFJtDNWsq: { defaultValue: "Apps", title: "Category", type: ControlType.String } });
addFonts(FramerG2qgkp8Bv, [...fonts]);

export {
  stdin_default
};
